#!/bin/bash
#
# This script will launch AndiX in a virtual machine.
# The virtual machine will use a kernel for your target CPU,
# but not too similar to the real kernel on the target machine.
# However, this is enough in most cases.
#
# You can log into the virtual machine via ssh to localhos:8022.
# You can access luci (the administrative OpenWrt web interface)
# by connecting to http://localhost:8080.
#

function setup_colors() {
    # ANSI colors
    DRED="[0;31m"
    RED="[1;31m"
    DGREEN="[0;32m"
    GREEN="[1;32m"
    BROWN="[0;33m"
    YELLOW="[1;33m"
    WHITE="[1;37m"
    RESET="[0m"
}

function check_vm() {
	VM_N=0
	for v in arm32 arm64 ; do
		[ ! -f openwrt/bin/andix/*$v*.Image ] && continue
		VM_N=$(($VM_N + 1))
		VM_NAME[$VM_N]=$v
		VM_KERNEL[$VM_N]=`echo openwrt/bin/andix/*$v*.Image`
		VM_ROOT[$VM_N]=`echo openwrt/bin/andix/*$v*-root.ext4`
	done

	if [ "$VM_N" == 0 ] ; then
		echo "${RED}No system images found under openwrt/bin${RESET}"
		return 1
	fi
	if [ "$VM_N" -gt 1 ] ; then
		cat << EOF
${YELLOW}Multiple virtual machine images detected.${RESET}

${GREEN}Please choose a machine to run:${RESET}

EOF
		i=1
		while [ $i -le $VM_N ] ; do
			s=${VM_NAME[$i]}
			eval a="\${ARCH_$s}"
			echo "    ${WHITE}$i. Run VM for $s, arch $a${RESET}"
			i=$(($i+1))
		done

		echo "${RESET}"
		read -p "${DRED}Pick a virtual machine: ${WHITE}" i
		echo "${RESET}"
		case $i in
			[1-$VM_N])
				;;
			*)
				exit 1
		esac
	else
		i=1
	fi

	SUBTARGET=${VM_NAME[$i]}
	KERNEL=${VM_KERNEL[$i]}
	ROOT=${VM_ROOT[$i]}
}

# int main() :)

ARCH_arm32=arm
MACHINE_arm32="-machine type=virt -cpu cortex-a9"
CMDLINE_arm32="root=/dev/vda"

ARCH_arm64=aarch64
MACHINE_arm64="-machine type=virt -cpu cortex-a53"
CMDLINE_arm64="console=ttyAMA0 root=/dev/vda"

setup_colors
check_vm

eval "ARCH=\${ARCH_${SUBTARGET}}"
eval "MACHINE=\${MACHINE_${SUBTARGET}}"
eval "CMDLINE=\${CMDLINE_${SUBTARGET}}"

[ -z "$SUBTARGET" -o -z "$ARCH" -o -z "$MACHINE" -o -z "$KERNEL" -o -z "$ROOT" \
	-o -z "$CMDLINE" ] && exit -1

echo "${GREEN}Launching virtual machine for arch ${WHITE}$ARCH${RESET}"
echo "${YELLOW}Press Ctrl+A,C to access QEMU monitor. Enter 'quit' to exit.${RESET}"

qemu-system-$ARCH $MACHINE -nographic \
        -machine type=virt,secure=off \
        -smp 2 -m 512 \
        -kernel $KERNEL \
        -drive file=$ROOT,if=none,format=raw,id=hd0 \
        -device virtio-blk-device,drive=hd0 \
        -netdev user,id=net0,net=10.0.2.0/24,host=10.0.2.2,restrict=off,hostfwd=tcp:127.0.0.1:8022-:22,hostfwd=tcp:127.0.0.1:8080-:80 \
        -device virtio-net-device,netdev=net0 \
        --append "$CMDLINE"
